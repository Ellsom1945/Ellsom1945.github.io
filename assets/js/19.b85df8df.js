(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{522:function(s,t,e){"use strict";e.r(t);var a=e(6),i=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"cooike"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cooike"}},[s._v("#")]),s._v(" Cooike")]),s._v(" "),e("h3",{attrs:{id:"_1、含义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、含义"}},[s._v("#")]),s._v(" 1、含义")]),s._v(" "),e("p",[s._v("​\t\t服务器颁发给客户的识别码（通行证），用来获取/确认用户的身份信息，一般由浏览器保存在本地（以键值对的形式<String,String>）")]),s._v(" "),e("h3",{attrs:{id:"_2、使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用"}},[s._v("#")]),s._v(" 2、使用")]),s._v(" "),e("p",[s._v("​\t\t首先可以利用Java的Cookie类自定义Cookie，服务器通过request.getCookie()获取一个Cookie数组，通过response.addCookie()向客户端发送cookie，至于如何发送和接收，就交给Servlet了，Servlet就单独写吧")]),s._v(" "),e("h3",{attrs:{id:"_3、api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、api"}},[s._v("#")]),s._v(" 3、API")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("setMaxAge(int ttl):表示cookie本地保存时间，如果设置为-1表示，页面关闭后就被删除，为0表示删除（只能通过这种方式删除），默认为-1")])]),s._v(" "),e("li",[e("p",[s._v("SetPath(String url):设置cookie有效路径，如果为“/”那么作用域为本域名下的contextpath")])]),s._v(" "),e("li",[e("p",[s._v("setDomain(String pattern):设置能访问cookie的有效域名，必须以“.”开头")])])]),s._v(" "),e("h3",{attrs:{id:"tips"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[s._v("#")]),s._v(" Tips")]),s._v(" "),e("ul",[e("li",[s._v("要修改Cookie的话得先get再重新set然后将Cookie加到响应头，删除同理，要把Cookie先get到手再setMaxAge(0)")]),s._v(" "),e("li",[s._v("domain表示的是cookie所在的域，默认为请求的地址，如网址为www.study.com/study，那么domain默认为www.study.com,要想实现跨域访问（比如单点登录），一般采用将作用域设置为父级域")])]),s._v(" "),e("h2",{attrs:{id:"session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" Session")]),s._v(" "),e("h3",{attrs:{id:"_1、含义-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、含义-2"}},[s._v("#")]),s._v(" 1、含义")]),s._v(" "),e("p",[s._v("​\t\t服务器用来记录客户的注册表，用来保存长期有效的信息（也是以键值对的形式，但是可以保存非String类型value<String,Object>）")]),s._v(" "),e("h3",{attrs:{id:"_2、使用-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用-2"}},[s._v("#")]),s._v(" 2、使用")]),s._v(" "),e("p",[s._v("​\t\t由于Session是当用户访问服务器时服务器自己创建的，所以只能通过request.getSession()来获取，至于为什么要从request获取：在tomcat中，HTTPProcessor负责解析用户请求，会对HTTP请求头部分析，如果发现存在jsessionid这样的cookie，就把cookie值set到HttpSevletRequest对象中，所以如果存在SessionID，getSession的时候就直接通过id找到session并返回，如果没有id就会创建一个session并在response的的SetHeader方法中，检查Request中Session对象是否存在，如果存在，则把SessionId写在Set－Cookie首部")]),s._v(" "),e("h3",{attrs:{id:"_3、api-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、api-2"}},[s._v("#")]),s._v(" 3、API")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("isNew():是否是一个新创建的session")])]),s._v(" "),e("li",[e("p",[s._v("set/getAttribute(String name):绑定/获取对象")])]),s._v(" "),e("li",[e("p",[s._v("invalidate():指示该 session 会话无效，并解除绑定到它上面的任何对象")])])]),s._v(" "),e("h3",{attrs:{id:"tips-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tips-2"}},[s._v("#")]),s._v(" TIPS")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("关于session失效时间，tomcat里面在web.xml中直接配置即可,单位：分钟")]),s._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[s._v("  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("session-config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("session-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("15"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("session-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("session-config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("当Cookie被禁止时，为了保证服务器能够收到SessionID，应该使用URL传递session，使用response.encodeURL(request.getRequestURI()),但这种方法很不安全")])])]),s._v(" "),e("h2",{attrs:{id:"对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[s._v("#")]),s._v(" 对比：")]),s._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"cookie的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie的缺点"}},[s._v("#")]),s._v(" Cookie的缺点")]),s._v(" "),e("ul",[e("li",[s._v("可以被用户禁止")]),s._v(" "),e("li",[s._v("保存在浏览器端不安全")]),s._v(" "),e("li",[s._v("只能保存较少的数据，一个Cookie只能保存4k数据，且浏览器对单个域名cookie上限有限制")]),s._v(" "),e("li",[s._v("保存的数据类型单一，只有字符串")])])]),s._v(" "),e("li",[e("h3",{attrs:{id:"session的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session的缺点"}},[s._v("#")]),s._v(" Session的缺点")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("一般是寄生在Cookie下的，当Cookie被禁止，Session也被禁止（当然可以用url解决这个问题）")])]),s._v(" "),e("li",[e("p",[s._v("当用户访问量很大时，对服务器压力大，可能会导致服务器内存溢出")])]),s._v(" "),e("li",[e("p",[s._v("session失效可能会导致数据丢失")])])])]),s._v(" "),e("li",[e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("ul",[e("li",[s._v("Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中")]),s._v(" "),e("li",[s._v("Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式")])])])])])}),[],!1,null,null,null);t.default=i.exports}}]);